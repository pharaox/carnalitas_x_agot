
kingsguard_lord_commander = { # Special
	skill = prowess

	name = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:councillor_liege = {
						primary_title = {
							has_variable = kingsguard
						}
						is_male = yes
					}
				}
				desc =  kingsguard_lord_commander_name
			}
			triggered_desc = {
				trigger = {
					scope:councillor_liege = {
						primary_title = {
							has_variable = kingsguard
						}
						is_female = yes
					}
				}
				desc =  queensguard_lord_commander_name
			}
		}
	}

	# Give public opinion and control tasks

	tooltip = game_concept_lord_commander_desc

	modifier = {
		name = kingsguard_lord_commander_modifier
		monthly_prestige = 1
		monthly_dynasty_prestige = 1
	}

	can_fire = { # A kingsguard serves for life; Joffrey interrupted that tradition;
		custom_description = {
			text = "agot_kingsguard_can_fire"
			OR = {
				has_global_variable = agot_startup_fire_councillors
				cp:kingsguard_lord_commander = { has_character_flag = can_fire_kingsguard }
				# has_realm_law = kingsguard_law_2
			}
		}
	}

	can_reassign = {
		custom_description = {
			text = "agot_kingsguard_can_fire"
			OR = {
				has_global_variable = agot_startup_fire_councillors
				cp:kingsguard_lord_commander ?= { has_character_flag = can_fire_kingsguard }
				# has_realm_law = kingsguard_law_2
			}
		}
	}

	valid_position = {
		can_have_kingsguard = yes
		#has_character_flag = assigning_kingsguard This will be useful soon
	}

	valid_character = {
		exists = root.liege_or_court_owner
		carnx_can_be_kingsguard_trigger = { COURT_OWNER = root.liege_or_court_owner }
		has_trait = kingsguard
	}

	on_get_position = {
		agot_on_get_kingsguard_lord_commander = yes
	}

	on_lose_position = {
		agot_on_fired_from_kingsguard = yes
	}

	on_fired_from_position = {
		agot_on_fired_from_kingsguard = yes
		#remove_character_flag = lord_commander Need to keep this for weirdness
	}
	portrait_animation = kingsguard
}

kingsguard_1 = { # 6 of them
	skill = prowess

	name = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:councillor_liege = {
						primary_title = {
							has_variable = kingsguard
						}
						is_male = yes
					}
				}
				desc =  kingsguard_name
			}
			triggered_desc = {
				trigger = {
					scope:councillor_liege = {
						primary_title = {
							has_variable = kingsguard
						}
						is_female = yes
					}
				}
				desc =  queensguard_name
			}
			desc = kingsguard_name
		}
	}

	tooltip = game_concept_kingsguard_desc

	modifier = {
		name = kingsguard_modifier
		monthly_prestige = 0.5
		monthly_dynasty_prestige = 0.5
	}

	can_fire = { # A kingsguard serves for life; Joffrey interrupted that tradition;
	custom_description = {
		text = "agot_kingsguard_can_fire"
		OR = {
			has_global_variable = agot_startup_fire_councillors
			cp:kingsguard_1 = { has_character_flag = can_fire_kingsguard }
			# has_realm_law = kingsguard_law_2
		}
	}
	}

	can_reassign = {
		custom_description = {
			text = "agot_kingsguard_can_fire"
			OR = {
				has_global_variable = agot_startup_fire_councillors
				cp:kingsguard_1 = { has_character_flag = can_fire_kingsguard }
				# has_realm_law = kingsguard_law_2
			}
		}
	}
	valid_position = {
		can_have_kingsguard = yes
	}
	valid_character = {
		exists = root.liege_or_court_owner
		carnx_can_be_kingsguard_trigger = { COURT_OWNER = root.liege_or_court_owner }
		has_trait = kingsguard

	}

	on_get_position = {
		agot_on_get_kingsguard = yes
	}

	on_lose_position = {
		agot_on_fired_from_kingsguard = yes
	}

	on_fired_from_position = {
		agot_on_fired_from_kingsguard = yes
	}
	portrait_animation = kingsguard
}

kingsguard_2 = { # 6 of them
	name = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:councillor_liege = {
						primary_title = {
							has_variable = kingsguard
						}
						is_male = yes
					}
				}
				desc =  kingsguard_name
			}
			triggered_desc = {
				trigger = {
					scope:councillor_liege = {
						primary_title = {
							has_variable = kingsguard
						}
						is_female = yes
					}
				}
				desc =  queensguard_name
			}
			triggered_desc = {
				trigger = {
					always = yes
				}
				desc = kingsguard_name #fallback
			}
		}
	}

	tooltip = game_concept_kingsguard_desc

	skill = prowess

	modifier = {
		name = kingsguard_modifier
		monthly_prestige = 0.5
		monthly_dynasty_prestige = 0.5
	}
	can_fire = { # A kingsguard serves for life; Joffrey interrupted that tradition;
	custom_description = {
		text = "agot_kingsguard_can_fire"
		OR = {
			has_global_variable = agot_startup_fire_councillors
			cp:kingsguard_2 = { has_character_flag = can_fire_kingsguard }
			# has_realm_law = kingsguard_law_2
		}
	}
	}

	can_reassign = {  # A kingsguard serves for life; Joffrey interrupted that tradition;
	custom_description = {
		text = "agot_kingsguard_can_fire"
		OR = {
			has_global_variable = agot_startup_fire_councillors
			cp:kingsguard_2 = { has_character_flag = can_fire_kingsguard }
			# has_realm_law = kingsguard_law_2
		}
	}
	}

	valid_position = {
		can_have_kingsguard = yes
	}
	valid_character = {
		exists = root.liege_or_court_owner
		carnx_can_be_kingsguard_trigger = { COURT_OWNER = root.liege_or_court_owner }
		has_trait = kingsguard

	}

	on_get_position = {
		agot_on_get_kingsguard = yes
	}

	on_lose_position = {
		agot_on_fired_from_kingsguard = yes
	}

	on_fired_from_position = {
		agot_on_fired_from_kingsguard = yes
	}
	portrait_animation = kingsguard
}

kingsguard_3 = { # 6 of them
	name = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:councillor_liege = {
						primary_title = {
							has_variable = kingsguard
						}
						is_male = yes
					}
				}
				desc =  kingsguard_name
			}
			triggered_desc = {
				trigger = {
					scope:councillor_liege = {
						primary_title = {
							has_variable = kingsguard
						}
						is_female = yes
					}
				}
				desc =  queensguard_name
			}
		}
	}

	tooltip = game_concept_kingsguard_desc

	skill = prowess

	modifier = {
		name = kingsguard_modifier
		monthly_prestige = 0.5
		monthly_dynasty_prestige = 0.5
	}
	can_fire = { # A kingsguard serves for life; Joffrey interrupted that tradition;
	custom_description = {
		text = "agot_kingsguard_can_fire"
		OR = {
			has_global_variable = agot_startup_fire_councillors
			cp:kingsguard_3 = { has_character_flag = can_fire_kingsguard }
			# has_realm_law = kingsguard_law_2
			}
		}
	}

	can_reassign = {
		custom_description = {
			text = "agot_kingsguard_can_fire"
			OR = {
				has_global_variable = agot_startup_fire_councillors
				cp:kingsguard_3 = { has_character_flag = can_fire_kingsguard }
				# has_realm_law = kingsguard_law_2
			}
		}
	}
	valid_position = {
		can_have_kingsguard = yes
	}
	valid_character = {
		exists = root.liege_or_court_owner
		carnx_can_be_kingsguard_trigger = { COURT_OWNER = root.liege_or_court_owner }
		has_trait = kingsguard

	}

	on_get_position = {
		agot_on_get_kingsguard = yes
	}

	on_lose_position = {
		agot_on_fired_from_kingsguard = yes
	}

	on_fired_from_position = {
		agot_on_fired_from_kingsguard = yes
	}
	portrait_animation = kingsguard
}

kingsguard_4 = { # 6 of them
	name = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:councillor_liege = {
						primary_title = {
							has_variable = kingsguard
						}
						is_male = yes
					}
				}
				desc =  kingsguard_name
			}
			triggered_desc = {
				trigger = {
					scope:councillor_liege = {
						primary_title = {
							has_variable = kingsguard
						}
						is_female = yes
					}
				}
				desc =  queensguard_name
			}
		}
	}

	tooltip = game_concept_kingsguard_desc

	skill = prowess

	modifier = {
		name = kingsguard_modifier
		monthly_prestige = 0.5
		monthly_dynasty_prestige = 0.5
	}
	can_fire = { # A kingsguard serves for life; Joffrey interrupted that tradition;
		custom_description = {
			text = "agot_kingsguard_can_fire"
			OR = {
				has_global_variable = agot_startup_fire_councillors
				cp:kingsguard_4 = { has_character_flag = can_fire_kingsguard }
				# has_realm_law = kingsguard_law_2
			}
		}
	}

	# A kingsguard serves for life; Joffrey interrupted that tradition;
	can_reassign = {
		custom_description = {
			text = "agot_kingsguard_can_fire"
			OR = {
				has_global_variable = agot_startup_fire_councillors
				cp:kingsguard_4 = { has_character_flag = can_fire_kingsguard }
				# has_realm_law = kingsguard_law_2
			}
		}
	}
	valid_position = {
		can_have_kingsguard = yes
	}
	valid_character = {
		exists = root.liege_or_court_owner
		carnx_can_be_kingsguard_trigger = { COURT_OWNER = root.liege_or_court_owner }
		has_trait = kingsguard

	}

	on_get_position = {
		agot_on_get_kingsguard = yes
	}

	on_lose_position = {
		agot_on_fired_from_kingsguard = yes
	}

	on_fired_from_position = {
		agot_on_fired_from_kingsguard = yes
	}
	portrait_animation = kingsguard
}

kingsguard_5 = { # 6 of them
	name = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:councillor_liege = {
						primary_title = {
							has_variable = kingsguard
						}
						is_male = yes
					}
				}
				desc =  kingsguard_name
			}
			triggered_desc = {
				trigger = {
					scope:councillor_liege = {
						primary_title = {
							has_variable = kingsguard
						}
						is_female = yes
					}
				}
				desc =  queensguard_name
			}
		}
	}

	tooltip = game_concept_kingsguard_desc

	skill = prowess

	modifier = {
		name = kingsguard_modifier
		monthly_prestige = 0.5
		monthly_dynasty_prestige = 0.5
	}

	can_fire = { # A kingsguard serves for life; Joffrey interrupted that tradition;
		custom_description = {
			text = "agot_kingsguard_can_fire"
			OR = {
				has_global_variable = agot_startup_fire_councillors
				cp:kingsguard_5 = { has_character_flag = can_fire_kingsguard }
				# has_realm_law = kingsguard_law_2
			}
		}
	}

	can_reassign = {
		custom_description = {
			text = "agot_kingsguard_can_fire"
			OR = {
				has_global_variable = agot_startup_fire_councillors
				cp:kingsguard_5 = { has_character_flag = can_fire_kingsguard }
				# has_realm_law = kingsguard_law_2
			}
		}
	}
	valid_position = {
		can_have_kingsguard = yes
	}
	valid_character = {
		exists = root.liege_or_court_owner
		carnx_can_be_kingsguard_trigger = { COURT_OWNER = root.liege_or_court_owner }
		has_trait = kingsguard

	}

	on_get_position = {
		agot_on_get_kingsguard = yes
	}

	on_lose_position = {
		agot_on_fired_from_kingsguard = yes
	}

	on_fired_from_position = {
		agot_on_fired_from_kingsguard = yes
	}
	portrait_animation = kingsguard
}

kingsguard_6 = { # 6 of them
	skill = prowess

	name = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:councillor_liege = {
						primary_title = {
							has_variable = kingsguard
						}
						is_male = yes
					}
				}
				desc =  kingsguard_name
			}
			triggered_desc = {
				trigger = {
					scope:councillor_liege = {
						primary_title = {
							has_variable = kingsguard
						}
						is_female = yes
					}
				}
				desc =  queensguard_name
			}
		}
	}

	tooltip = game_concept_kingsguard_desc

	modifier = {
		name = kingsguard_modifier
		monthly_prestige = 0.5
		monthly_dynasty_prestige = 0.5
	}
	can_fire = { # A kingsguard serves for life; Joffrey interrupted that tradition;
		custom_description = {
			text = "agot_kingsguard_can_fire"
			OR = {
				has_global_variable = agot_startup_fire_councillors
				cp:kingsguard_6 = { has_character_flag = can_fire_kingsguard }
				# has_realm_law = kingsguard_law_2
			}
		}
	}
	can_reassign = {
		custom_description = {
			text = "agot_kingsguard_can_fire"
			OR = {
				has_global_variable = agot_startup_fire_councillors
				cp:kingsguard_6 = { has_character_flag = can_fire_kingsguard }
				# has_realm_law = kingsguard_law_2
			}
		}
	} # A kingsguard serves for life; Joffrey interrupted that tradition;
	valid_position = {
		can_have_kingsguard = yes
	}
	valid_character = {
		exists = root.liege_or_court_owner
		carnx_can_be_kingsguard_trigger = { COURT_OWNER = root.liege_or_court_owner }
		has_trait = kingsguard

	}

	on_get_position = {
		agot_on_get_kingsguard = yes
	}

	on_lose_position = {
		agot_on_fired_from_kingsguard = yes
	}

	on_fired_from_position = {
		agot_on_fired_from_kingsguard = yes
	}
	portrait_animation = kingsguard
}